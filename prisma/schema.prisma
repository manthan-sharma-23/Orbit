generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  theme         String?
  status        String?    @default("available")
  view          String?    @default("public")
  rooms         Room[] // A user can be part of multiple rooms
  messages      Message[] // A user can send multiple messages
  friends       Friend[]
  UserTeam      UserTeam[]
  UserTask      UserTask[]
}

model Room {
  id       String    @id @default(cuid())
  createAt DateTime  @default(now())
  type     String    @default("person")
  users    User[] // A room can have multiple users
  messages Message[] // A room can have multiple messages
  Team     Team[]
}

model Message {
  id     String   @id @default(cuid())
  text   String?
  sendAt DateTime @default(now())
  sender User?    @relation(fields: [userId], references: [id]) // A message is sent by a user
  room   Room?    @relation(fields: [roomId], references: [id]) // A message is sent to a room
  userId String?
  roomId String?
}

model Friend {
  id         String   @id @default(cuid())
  status     String   @default("pending")
  sender     User     @relation(fields: [senderId], references: [id])
  senderId   String
  receiverId String
  roomId     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Team {
  id          String        @id @default(cuid())
  name        String
  description String?
  room        Room          @relation(fields: [roomId], references: [id])
  roomId      String
  users       UserTeam[] // A team can have multiple users with roles
  TeamChannel TeamChannel[]
}

model UserTeam {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  role      String // Define roles for users in the team
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Channel {
  id          String        @id @default(cuid())
  name        String
  description String?
  teams       TeamChannel[] // A channel can have multiple teams
}

model TeamChannel {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  channel   Channel  @relation(fields: [channelId], references: [id])
  channelId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      String     @default("pending")
  tags        Tag[] // A task can have multiple tags
  assignedTo  UserTask[] // A task can be assigned to multiple users
}

model Tag {
  id    String  @id @default(cuid())
  name  String
  color String?
  tasks Task[] // Many-to-many relationship with tasks
}

model UserTask {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
