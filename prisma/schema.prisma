generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  password       String?
  emailVerified  DateTime?
  image          String?
  theme          String?
  status         String?         @default("available")
  view           String?         @default("public")
  rooms          Room[] // A user can be part of multiple rooms
  userMessages   UserMessage[] // A user can send multiple messages
  threadMessages ThreadMessage[]
  friends        Friend[]
  userTeams      UserTeam[]
  userTasks      UserTask[]
  userSpace      UserSpace[]
  mails          Mail[]
  invites        Invite[]
}

model Room {
  id       String        @id @default(cuid())
  createAt DateTime      @default(now())
  type     String        @default("person")
  users    User[] // A room can have multiple users
  messages UserMessage[] // A room can have multiple messages
}

model UserMessage {
  id     String   @id @default(cuid())
  text   String?
  sendAt DateTime @default(now())
  sender User?    @relation(fields: [userId], references: [id]) // A message is sent by a user
  room   Room?    @relation(fields: [roomId], references: [id]) // A message is sent to a room
  userId String?
  roomId String?
}

model Friend {
  id         String   @id @default(cuid())
  status     String   @default("pending")
  sender     User     @relation(fields: [senderId], references: [id])
  senderId   String
  receiverId String
  roomId     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Team {
  id          String     @id @default(cuid())
  name        String
  description String?
  type        String?    @default("invite_only")
  space       Space      @relation(fields: [spaceId], references: [id])
  spaceId     String
  members     UserTeam[]
  threads     Thread[]
  Invites     Invite[]
}

model UserTeam {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  role      String   @default("member") // Define roles for users in the team
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Space {
  id          String      @id @default(cuid())
  name        String
  description String?
  teams       Team[]
  createdBy   String?     @default("anonymous")
  image       String?
  UserSpace   UserSpace[]
  Invites     Invite[]
}

model UserSpace {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  space   Space  @relation(fields: [spaceId], references: [id])
  spaceId String
  role    String @default("member")
}

model Thread {
  id       String          @id @default(uuid())
  name     String
  type     String          @default("chat")
  Team     Team?           @relation(fields: [teamId], references: [id])
  teamId   String?
  messages ThreadMessage[]
}

model ThreadMessage {
  id        Int      @id @default(autoincrement())
  type      String?  @default("chat")
  data      String
  isActive  Boolean  @default(true)
  Thread    Thread?  @relation(fields: [threadId], references: [id])
  threadId  String?
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  timeStamp DateTime @default(now())
}

model UserTask {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invite {
  id        String   @id @default(uuid())
  type      String   @default("space")
  status    Boolean  @default(false)
  Space     Space?   @relation(fields: [spaceId], references: [id])
  spaceId   String?
  mails     Mail[]
  from      String
  Team      Team?    @relation(fields: [teamId], references: [id])
  teamId    String?
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      String     @default("pending")
  tags        Tag[]      @relation("TaskTags")
  assignedTo  UserTask[] // A task can be assigned to multiple users
}

model Tag {
  id    String  @id @default(cuid())
  name  String  @unique
  color String?
  tasks Task[]  @relation("TaskTags")
  mails Mail[]  @relation("MailTags")
}

model Mail {
  id          String   @id @default(uuid())
  data        String
  to          String
  from        String
  title       String
  description String?
  isInvite    Boolean  @default(false)
  isRead      Boolean  @default(false)
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
  Invite      Invite?  @relation(fields: [inviteId], references: [id])
  inviteId    String?
  tags        Tag[]    @relation("MailTags")
  createdAt   DateTime @default(now())
}
